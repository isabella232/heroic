diff --git a/heroic-component/src/main/java/com/spotify/heroic/metric/MetricsConnectionSettings.kt b/heroic-component/src/main/java/com/spotify/heroic/metric/MetricsConnectionSettings.kt
index 833c647e..cfca1f36 100644
--- a/heroic-component/src/main/java/com/spotify/heroic/metric/MetricsConnectionSettings.kt
+++ b/heroic-component/src/main/java/com/spotify/heroic/metric/MetricsConnectionSettings.kt
@@ -67,8 +67,8 @@ open class MetricsConnectionSettings(
     /**
      * See [MetricsConnectionSettings.DEFAULT_MUTATION_BATCH_SIZE]
      */
+    @JvmField
     var maxWriteBatchSize: Int
-        protected set
 
     protected constructor() : this(
         Optional.of<Int>(MAX_MUTATION_BATCH_SIZE),
diff --git a/heroic-dist/src/test/java/com/spotify/heroic/analytics/bigtable/HeroicMetricsConfigurationTest.java b/heroic-dist/src/test/java/com/spotify/heroic/analytics/bigtable/HeroicMetricsConfigurationTest.java
index 1936754d..044e6f6a 100644
--- a/heroic-dist/src/test/java/com/spotify/heroic/analytics/bigtable/HeroicMetricsConfigurationTest.java
+++ b/heroic-dist/src/test/java/com/spotify/heroic/analytics/bigtable/HeroicMetricsConfigurationTest.java
@@ -54,9 +54,9 @@ public class HeroicMetricsConfigurationTest {
         var serializer = TinySerializer.builder().build();
 
         var connectionSettings = new MetricsConnectionSettings(Optional.of(maxWriteBatchSize),
-        Optional.of(mutateRpcTimeoutMs), Optional.of(readRowsRpcTimeoutMs),
-         Optional.of(shortRpcTimeoutMs), Optional.of(maxScanTimeoutRetries),
-          Optional.of(maxElapsedBackoffMs));
+                Optional.of(mutateRpcTimeoutMs), Optional.of(readRowsRpcTimeoutMs),
+                Optional.of(shortRpcTimeoutMs), Optional.of(maxScanTimeoutRetries),
+                Optional.of(maxElapsedBackoffMs));
 
         var bigtableBackend = new BigtableBackend(null,
                 serializer,
@@ -107,7 +107,7 @@ public class HeroicMetricsConfigurationTest {
 
         final var instance = HeroicConfigurationTestUtils.testConfiguration("heroic-all.yml");
 
-        // Check that the BigTableBackend's maxWriteBatchSize was picked up
+        // Check that the BigTableBackend's maxWriteBatchSize et al were picked up
         // from the heroic-all.yml config file
         // @formatter:off
         instance.inject(coreComponent -> {
@@ -125,7 +125,7 @@ public class HeroicMetricsConfigurationTest {
             // These (int) casts are needed to guide the compiler to pick the correct method
             // call.
             var mcs = bigtableBackend.metricsConnectionSettings();
-            assertEquals(EXPECTED_MAX_WRITE_BATCH_SIZE, (int) mcs.getMaxWriteBatchSize());
+            assertEquals(EXPECTED_MAX_WRITE_BATCH_SIZE, (int) mcs.maxWriteBatchSize);
             assertEquals(EXPECTED_MUTATE_RPC_TIMEOUT_MS, (int) mcs.mutateRpcTimeoutMs);
             assertEquals(EXPECTED_READ_ROWS_RPC_TIMEOUT_MS, (int) mcs.readRowsRpcTimeoutMs);
             assertEquals(EXPECTED_SHORT_RPC_TIMEOUT_MS, (int) mcs.shortRpcTimeoutMs);
@@ -142,26 +142,24 @@ public class HeroicMetricsConfigurationTest {
         {
             final int tooBigBatchSize = 5_000_000;
 
+            var bigtablebackend = getBigtableBackend(tooBigBatchSize);
             assertEquals(BigtableMetricModule.MAX_MUTATION_BATCH_SIZE,
-                    getBigtableMetricModule(tooBigBatchSize).
-                            getMetricsConnectionSettings().
-                            getMaxWriteBatchSize());
+                    bigtablebackend.metricsConnectionSettings().maxWriteBatchSize);
         }
         {
             final int tooSmallBatchSize = 1;
 
             assertEquals(BigtableMetricModule.MIN_MUTATION_BATCH_SIZE,
-                    getBigtableMetricModule(tooSmallBatchSize).
-                            getMetricsConnectionSettings().
-                            getMaxWriteBatchSize());
+                    getBigtableBackend(tooSmallBatchSize)
+                            .metricsConnectionSettings().maxWriteBatchSize);
         }
         {
             final int validSize = 100_000;
 
             assertEquals(validSize,
-                    getBigtableMetricModule(validSize).
-                            getMetricsConnectionSettings().
-                            getMaxWriteBatchSize());
+                    getBigtableBackend(validSize).
+                            metricsConnectionSettings().
+                            maxWriteBatchSize);
         }
     }
 }
diff --git a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableBackend.java b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableBackend.java
index fe54ccc1..f143d679 100644
--- a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableBackend.java
+++ b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableBackend.java
@@ -141,7 +141,6 @@ public class BigtableBackend extends AbstractMetricBackend implements LifeCycles
         final Groups groups,
         @Named("table") final String table,
         @Named("configure") final boolean configure,
-        @Named("metricsConnectionSettings")
         final MetricsConnectionSettings metricsConnectionSettings,
         MetricBackendReporter reporter,
         @Named("application/json") ObjectMapper mapper
@@ -400,7 +399,7 @@ public class BigtableBackend extends AbstractMetricBackend implements LifeCycles
 
             builder.setCell(columnFamily, offsetBytes, valueBytes);
 
-            if (builder.size() >= metricsConnectionSettings.getMaxWriteBatchSize()) {
+            if (builder.size() >= metricsConnectionSettings.maxWriteBatchSize) {
                 saved.add(Pair.of(rowKey, builder.build()));
                 building.put(rowKey, Mutations.builder());
             }
diff --git a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableConnectionBuilder.java b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableConnectionBuilder.java
index e61c1d7d..3c46c822 100644
--- a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableConnectionBuilder.java
+++ b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableConnectionBuilder.java
@@ -34,11 +34,14 @@ import eu.toolchain.async.AsyncFramework;
 import io.grpc.Status;
 import java.util.concurrent.Callable;
 import javax.annotation.Nullable;
+import javax.inject.Inject;
+import javax.inject.Named;
 import org.apache.commons.lang3.builder.ToStringBuilder;
 import org.apache.commons.lang3.builder.ToStringStyle;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+@BigtableScope
 public class BigtableConnectionBuilder implements Callable<BigtableConnection> {
     private static final Logger log = LoggerFactory.getLogger(BigtableConnectionBuilder.class);
 
@@ -56,7 +59,8 @@ public class BigtableConnectionBuilder implements Callable<BigtableConnection> {
     private final int flushIntervalSeconds;
 
     private final String emulatorEndpoint;
-    private final MetricsConnectionSettings settings;
+
+    private final MetricsConnectionSettings metricsConnectionSettings;
 
     public BigtableConnectionBuilder(
         final String project,
@@ -67,7 +71,7 @@ public class BigtableConnectionBuilder implements Callable<BigtableConnection> {
         final AsyncFramework async,
         final boolean disableBulkMutations,
         final int flushIntervalSeconds,
-        MetricsConnectionSettings settings
+        final MetricsConnectionSettings metricsConnectionSettings
     ) {
         this.project = project;
         this.instance = instance;
@@ -77,29 +81,30 @@ public class BigtableConnectionBuilder implements Callable<BigtableConnection> {
         this.async = async;
         this.disableBulkMutations = disableBulkMutations;
         this.flushIntervalSeconds = flushIntervalSeconds;
-        this.settings = settings;
+        this.metricsConnectionSettings = metricsConnectionSettings;
     }
 
     @Override
     public BigtableConnection call() throws Exception {
         final var credentials = this.credentials.build();
 
+
         final var retryOptions = RetryOptions.builder()
             .addStatusToRetryOn(Status.Code.UNKNOWN)
             .addStatusToRetryOn(Status.Code.UNAVAILABLE)
             .setAllowRetriesWithoutTimestamp(true)
             .setEnableRetries(true)
-            .setMaxScanTimeoutRetries(settings.maxScanTimeoutRetries)
-            .setMaxElapsedBackoffMillis(settings.maxElapsedBackoffMs)
+            .setMaxScanTimeoutRetries(metricsConnectionSettings.maxScanTimeoutRetries)
+            .setMaxElapsedBackoffMillis(metricsConnectionSettings.maxElapsedBackoffMs)
             .build();
 
         final var bulkOptions =
-            BulkOptions.builder().setBulkMaxRowKeyCount(settings.getMaxWriteBatchSize()).build();
+            BulkOptions.builder().setBulkMaxRowKeyCount(metricsConnectionSettings.maxWriteBatchSize).build();
 
         var callOptionsConfig = CallOptionsConfig.builder()
-                .setReadRowsRpcTimeoutMs(settings.readRowsRpcTimeoutMs)
-                .setMutateRpcTimeoutMs(settings.mutateRpcTimeoutMs)
-                .setShortRpcTimeoutMs(settings.shortRpcTimeoutMs)
+                .setReadRowsRpcTimeoutMs(metricsConnectionSettings.readRowsRpcTimeoutMs)
+                .setMutateRpcTimeoutMs(metricsConnectionSettings.mutateRpcTimeoutMs)
+                .setShortRpcTimeoutMs(metricsConnectionSettings.shortRpcTimeoutMs)
                 .setUseTimeout(true).build();
 
         var builder = BigtableOptions.builder()
@@ -153,7 +158,7 @@ public class BigtableConnectionBuilder implements Callable<BigtableConnection> {
             .append("disableBulkMutations", disableBulkMutations)
             .append("flushIntervalSeconds", flushIntervalSeconds)
             .append("emulatorEndpoint", emulatorEndpoint)
-            .append("settings", settings)
+            .append("settings", metricsConnectionSettings)
             .toString();
     }
 }
diff --git a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableMetricModule.java b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableMetricModule.java
index 964962dd..3aa54b8e 100644
--- a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableMetricModule.java
+++ b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/BigtableMetricModule.java
@@ -83,7 +83,13 @@ public final class BigtableMetricModule implements MetricModule, DynamicModuleId
     private final CredentialsBuilder credentials;
     private final boolean configure;
     private final boolean disableBulkMutations;
-    private final MetricsConnectionSettingsModule metricsConnectionSettings;
+    private final int maxWriteBatchSize;
+    private final Optional<Integer> mutateRpcTimeoutMs;
+    private final Optional<Integer> readRowsRpcTimeoutMs;
+    private final Optional<Integer> shortRpcTimeoutMs;
+    private final Optional<Integer> maxScanTimeoutRetries;
+    private final Optional<Integer> maxElapsedBackoffMs;
+    private final MetricsConnectionSettings metricsConnectionSettings;
 
     private final int flushIntervalSeconds;
 
@@ -129,23 +135,28 @@ public final class BigtableMetricModule implements MetricModule, DynamicModuleId
         this.configure = configure.orElse(DEFAULT_CONFIGURE);
         this.disableBulkMutations = disableBulkMutations.orElse(DEFAULT_DISABLE_BULK_MUTATIONS);
 
+        // This batch of fields ends up in a BigtableMetricsConnectionSettings object
+        this.mutateRpcTimeoutMs = mutateRpcTimeoutMs;
+        this.readRowsRpcTimeoutMs = readRowsRpcTimeoutMs;
+        this.shortRpcTimeoutMs = shortRpcTimeoutMs;
+        this.maxScanTimeoutRetries = maxScanTimeoutRetries;
+        this.maxElapsedBackoffMs = maxElapsedBackoffMs;
+
         // Basically make sure that maxWriteBatchSize, if set, is sane
-        int maxWriteBatch = maxWriteBatchSize.orElse(DEFAULT_MUTATION_BATCH_SIZE);
-        maxWriteBatch = Math.max(MIN_MUTATION_BATCH_SIZE, maxWriteBatch);
-        maxWriteBatch = Math.min(MAX_MUTATION_BATCH_SIZE, maxWriteBatch);
+        int maxWriteBatchBounded = maxWriteBatchSize.orElse(DEFAULT_MUTATION_BATCH_SIZE);
+        maxWriteBatchBounded = Math.max(MIN_MUTATION_BATCH_SIZE, maxWriteBatchBounded);
+        maxWriteBatchBounded = Math.min(MAX_MUTATION_BATCH_SIZE, maxWriteBatchBounded);
 
-        this.metricsConnectionSettings = new MetricsConnectionSettingsModule(
-                maxWriteBatchSize,
-                mutateRpcTimeoutMs,
-                readRowsRpcTimeoutMs,
-                shortRpcTimeoutMs,
-                maxScanTimeoutRetries,
-                maxElapsedBackoffMs);
+        this.maxWriteBatchSize = maxWriteBatchBounded;
 
         this.flushIntervalSeconds = flushIntervalSeconds.orElse(DEFAULT_FLUSH_INTERVAL_SECONDS);
         this.batchSize = batchSize;
         this.emulatorEndpoint = emulatorEndpoint.orElse(null);
 
+        this.metricsConnectionSettings = new BigtableMetricsConnectionSettings(maxWriteBatchSize,
+            mutateRpcTimeoutMs, readRowsRpcTimeoutMs, shortRpcTimeoutMs,
+            maxScanTimeoutRetries, maxElapsedBackoffMs);
+
         log.info("BigTable Metric Module: \n{}", toString());
     }
 
@@ -154,20 +165,13 @@ public final class BigtableMetricModule implements MetricModule, DynamicModuleId
         return DaggerBigtableMetricModule_C
                 .builder()
                 .primaryComponent(primary)
-                .metricsConnectionSettingsModule(metricsConnectionSettings)
                 .depends(backend)
                 .m(new M())
                 .build();
     }
 
-    public MetricsConnectionSettings getMetricsConnectionSettings() {
-        return metricsConnectionSettings;
-    }
-
-
     @BigtableScope
-    @Component(modules = {M.class, MetricsConnectionSettingsModule.class}, dependencies =
-     {PrimaryComponent.class, Depends.class})
+    @Component(modules = {M.class}, dependencies = {PrimaryComponent.class, Depends.class})
     interface C extends Exposed {
         @Override
         BigtableBackend backend();
@@ -188,7 +192,7 @@ public final class BigtableMetricModule implements MetricModule, DynamicModuleId
                         new BigtableConnectionBuilder(
                             project, instance, profile, credentials, emulatorEndpoint,
                             async, disableBulkMutations, flushIntervalSeconds,
-                                metricsConnectionSettings
+                            metricsConnectionSettings
                         ));
                 }
 
@@ -223,6 +227,12 @@ public final class BigtableMetricModule implements MetricModule, DynamicModuleId
             return new MetricsRowKeySerializer();
         }
 
+        @Provides
+        @BigtableScope
+        public MetricsConnectionSettings metricsConnectionSettings() {
+            return metricsConnectionSettings;
+        }
+
         @Provides
         @BigtableScope
         public Groups groups() {
@@ -390,7 +400,6 @@ public final class BigtableMetricModule implements MetricModule, DynamicModuleId
             .append("credentials", credentials)
             .append("configure", configure)
             .append("disableBulkMutations", disableBulkMutations)
-            .append("connectionSettings", metricsConnectionSettings)
             .append("flushIntervalSeconds", flushIntervalSeconds)
             .append("batchSize", batchSize)
             .append("emulatorEndpoint", emulatorEndpoint)
diff --git a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/MetricsConnectionSettingsModule.java b/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/MetricsConnectionSettingsModule.java
deleted file mode 100644
index 9c5d9707..00000000
--- a/metric/bigtable/src/main/java/com/spotify/heroic/metric/bigtable/MetricsConnectionSettingsModule.java
+++ /dev/null
@@ -1,95 +0,0 @@
-/*
- * Copyright (c) 2015 Spotify AB.
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-package com.spotify.heroic.metric.bigtable;
-
-import com.spotify.heroic.common.ModuleId;
-import com.spotify.heroic.metric.MetricsConnectionSettings;
-import dagger.Module;
-import dagger.Provides;
-import java.util.Optional;
-import javax.inject.Named;
-
-/**
- * Simple POD class that exposes MetricsConnectionSettings via Dagger's module
- * functionality.
- */
-@Module
-@ModuleId("bigtable")
-public class MetricsConnectionSettingsModule extends MetricsConnectionSettings {
-    public MetricsConnectionSettingsModule(
-            Optional<Integer> maxWriteBatchSize,
-            Optional<Integer> mutateRpcTimeoutMs,
-            Optional<Integer> readRowsRpcTimeoutMs,
-            Optional<Integer> shortRpcTimeoutMs,
-            Optional<Integer> maxScanTimeoutRetries,
-            Optional<Integer> maxElapsedBackoffMs
-    ) {
-        super(maxWriteBatchSize, mutateRpcTimeoutMs, readRowsRpcTimeoutMs, shortRpcTimeoutMs,
-                maxScanTimeoutRetries, maxElapsedBackoffMs);
-    }
-
-    public MetricsConnectionSettingsModule() {
-        super();
-    }
-
-    @Provides
-    @Named("metricsConnectionSettings")
-    public MetricsConnectionSettings metricsConnectionSettingsProvides() {
-        return this;
-    }
-
-    @Provides
-    @Named("maxWriteBatchSize")
-    public Integer maxWriteBatchSizeProvides() {
-        return super.getMaxWriteBatchSize();
-    }
-
-    @Provides
-    @Named("mutateRpcTimeoutMs")
-    public Integer mutateRpcTimeoutMsProvides() {
-        return super.mutateRpcTimeoutMs;
-    }
-
-    @Provides
-    @Named("readRowsRpcTimeoutMs")
-    public Integer readRowsRpcTimeoutMsProvides() {
-        return super.readRowsRpcTimeoutMs;
-    }
-
-    @Provides
-    @Named("shortRpcTimeoutMs")
-    public Integer shortRpcTimeoutMsProvides() {
-        return super.shortRpcTimeoutMs;
-    }
-
-    @Provides
-    @Named("maxScanTimeoutRetries")
-    public Integer maxScanTimeoutRetriesProvides() {
-        return super.maxScanTimeoutRetries;
-    }
-
-    @Provides
-    @Named("maxElapsedBackoffMs")
-    public Integer maxElapsedBackoffMsProvides() {
-        return super.maxElapsedBackoffMs;
-    }
-}
